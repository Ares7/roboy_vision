<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="connected__layer_8c" kind="file" language="C++">
    <compoundname>connected_layer.c</compoundname>
    <includes refid="connected__layer_8h" local="yes">connected_layer.h</includes>
    <includes refid="convolutional__layer_8h" local="yes">convolutional_layer.h</includes>
    <includes refid="batchnorm__layer_8h" local="yes">batchnorm_layer.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <includes refid="cuda_8h" local="yes">cuda.h</includes>
    <includes refid="blas_8h" local="yes">blas.h</includes>
    <includes refid="gemm_8h" local="yes">gemm.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="493">
        <label>box.h</label>
        <link refid="box_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>float.h</label>
      </node>
      <node id="498">
        <label>convolutional_layer.h</label>
        <link refid="convolutional__layer_8h_source"/>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="483">
        <label>stdlib.h</label>
      </node>
      <node id="479">
        <label>/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c</label>
        <link refid="connected_layer.c"/>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
      </node>
      <node id="480">
        <label>connected_layer.h</label>
        <link refid="connected__layer_8h_source"/>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="487">
        <label>cuda.h</label>
        <link refid="cuda_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="494">
        <label>data.h</label>
        <link refid="data_8h_source"/>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
      </node>
      <node id="490">
        <label>network.h</label>
        <link refid="network_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
      </node>
      <node id="503">
        <label>gemm.h</label>
        <link refid="gemm_8h_source"/>
      </node>
      <node id="481">
        <label>activations.h</label>
        <link refid="activations_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
      </node>
      <node id="496">
        <label>list.h</label>
        <link refid="list_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="495">
        <label>matrix.h</label>
        <link refid="matrix_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>darknet.h</label>
        <link refid="darknet_8h_source"/>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
      </node>
      <node id="499">
        <label>batchnorm_layer.h</label>
        <link refid="batchnorm__layer_8h_source"/>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="489">
        <label>layer.h</label>
        <link refid="layer_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="486">
        <label>pthread.h</label>
      </node>
      <node id="491">
        <label>image.h</label>
        <link refid="image_8h_source"/>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="485">
        <label>string.h</label>
      </node>
      <node id="502">
        <label>blas.h</label>
        <link refid="blas_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="500">
        <label>utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
      </node>
      <node id="501">
        <label>time.h</label>
      </node>
      <node id="488">
        <label>math.h</label>
      </node>
      <node id="497">
        <label>tree.h</label>
        <link refid="tree_8h_source"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="connected__layer_8c_1a8c03925e07504c5f996beb769d594852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlayer" kindref="compound">layer</ref></type>
        <definition>layer make_connected_layer</definition>
        <argsstring>(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)</argsstring>
        <name>make_connected_layer</name>
        <param>
          <type>int</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>ACTIVATION</type>
          <declname>activation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batch_normalize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>adam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" line="14" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" bodystart="14" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="connected__layer_8c_1a822f192980954880e61172c8fd3477c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_connected_layer</definition>
        <argsstring>(layer l, update_args a)</argsstring>
        <name>update_connected_layer</name>
        <param>
          <type><ref refid="structlayer" kindref="compound">layer</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structupdate__args" kindref="compound">update_args</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" line="132" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" bodystart="132" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="connected__layer_8c_1a4cf1c868f90698cafc796c63a20ae371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void forward_connected_layer</definition>
        <argsstring>(layer l, network net)</argsstring>
        <name>forward_connected_layer</name>
        <param>
          <type><ref refid="structlayer" kindref="compound">layer</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structnetwork" kindref="compound">network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" line="151" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" bodystart="151" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="connected__layer_8c_1a510156aa4506e40152e6fc6dafa991c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void backward_connected_layer</definition>
        <argsstring>(layer l, network net)</argsstring>
        <name>backward_connected_layer</name>
        <param>
          <type><ref refid="structlayer" kindref="compound">layer</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structnetwork" kindref="compound">network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" line="169" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" bodystart="169" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="connected__layer_8c_1ab81df3b05a3341c86512c3203b362948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void denormalize_connected_layer</definition>
        <argsstring>(layer l)</argsstring>
        <name>denormalize_connected_layer</name>
        <param>
          <type><ref refid="structlayer" kindref="compound">layer</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" line="199" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="connected__layer_8c_1ac9042bad9fb378158ff9ec36719b4b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void statistics_connected_layer</definition>
        <argsstring>(layer l)</argsstring>
        <name>statistics_connected_layer</name>
        <param>
          <type><ref refid="structlayer" kindref="compound">layer</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" line="215" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c" bodystart="215" bodyend="231"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;connected_layer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;convolutional_layer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;batchnorm_layer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cuda.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gemm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="structlayer" kindref="compound">layer</ref><sp/>make_connected_layer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputs,<sp/>ACTIVATION<sp/>activation,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_normalize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adam)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlayer" kindref="compound">layer</ref><sp/>l<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>l.learning_rate_scale<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>l.type<sp/>=<sp/>CONNECTED;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>l.inputs<sp/>=<sp/>inputs;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>l.outputs<sp/>=<sp/>outputs;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>l.batch=batch;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>l.batch_normalize<sp/>=<sp/>batch_normalize;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>l.h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>l.w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>l.c<sp/>=<sp/>inputs;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>l.out_h<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>l.out_w<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>l.out_c<sp/>=<sp/>outputs;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>l.output<sp/>=<sp/>calloc(batch*outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>l.delta<sp/>=<sp/>calloc(batch*outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>l.weight_updates<sp/>=<sp/>calloc(inputs*outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>l.bias_updates<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>l.weights<sp/>=<sp/>calloc(outputs*inputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>l.biases<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>l.forward<sp/>=<sp/>forward_connected_layer;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>l.backward<sp/>=<sp/>backward_connected_layer;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>l.update<sp/>=<sp/>update_connected_layer;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>scale<sp/>=<sp/>1./sqrt(inputs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>sqrt(2./inputs);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>outputs*inputs;<sp/>++i){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.weights[i]<sp/>=<sp/>scale*rand_uniform(-1,<sp/>1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>outputs;<sp/>++i){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.biases[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(adam){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.m<sp/>=<sp/>calloc(l.inputs*l.outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.v<sp/>=<sp/>calloc(l.inputs*l.outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.bias_m<sp/>=<sp/>calloc(l.outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scale_m<sp/>=<sp/>calloc(l.outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.bias_v<sp/>=<sp/>calloc(l.outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scale_v<sp/>=<sp/>calloc(l.outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(batch_normalize){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scales<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scale_updates<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>outputs;<sp/>++i){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scales[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.mean<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.mean_delta<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.variance<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.variance_delta<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.rolling_mean<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.rolling_variance<sp/>=<sp/>calloc(outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.x<sp/>=<sp/>calloc(batch*outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.x_norm<sp/>=<sp/>calloc(batch*outputs,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>l.forward_gpu<sp/>=<sp/>forward_connected_layer_gpu;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>l.backward_gpu<sp/>=<sp/>backward_connected_layer_gpu;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>l.update_gpu<sp/>=<sp/>update_connected_layer_gpu;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>l.weights_gpu<sp/>=<sp/>cuda_make_array(l.weights,<sp/>outputs*inputs);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>l.biases_gpu<sp/>=<sp/>cuda_make_array(l.biases,<sp/>outputs);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>l.weight_updates_gpu<sp/>=<sp/>cuda_make_array(l.weight_updates,<sp/>outputs*inputs);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>l.bias_updates_gpu<sp/>=<sp/>cuda_make_array(l.bias_updates,<sp/>outputs);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>l.output_gpu<sp/>=<sp/>cuda_make_array(l.output,<sp/>outputs*batch);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>l.delta_gpu<sp/>=<sp/>cuda_make_array(l.delta,<sp/>outputs*batch);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adam)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.m_gpu<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_make_array(0,<sp/>inputs*outputs);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.v_gpu<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_make_array(0,<sp/>inputs*outputs);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.bias_m_gpu<sp/>=<sp/><sp/>cuda_make_array(0,<sp/>outputs);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.bias_v_gpu<sp/>=<sp/><sp/>cuda_make_array(0,<sp/>outputs);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scale_m_gpu<sp/>=<sp/>cuda_make_array(0,<sp/>outputs);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scale_v_gpu<sp/>=<sp/>cuda_make_array(0,<sp/>outputs);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(batch_normalize){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.mean_gpu<sp/>=<sp/>cuda_make_array(l.mean,<sp/>outputs);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.variance_gpu<sp/>=<sp/>cuda_make_array(l.variance,<sp/>outputs);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.rolling_mean_gpu<sp/>=<sp/>cuda_make_array(l.mean,<sp/>outputs);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.rolling_variance_gpu<sp/>=<sp/>cuda_make_array(l.variance,<sp/>outputs);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.mean_delta_gpu<sp/>=<sp/>cuda_make_array(l.mean,<sp/>outputs);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.variance_delta_gpu<sp/>=<sp/>cuda_make_array(l.variance,<sp/>outputs);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scales_gpu<sp/>=<sp/>cuda_make_array(l.scales,<sp/>outputs);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scale_updates_gpu<sp/>=<sp/>cuda_make_array(l.scale_updates,<sp/>outputs);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.x_gpu<sp/>=<sp/>cuda_make_array(l.output,<sp/>l.batch*outputs);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.x_norm_gpu<sp/>=<sp/>cuda_make_array(l.output,<sp/>l.batch*outputs);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CUDNN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudnnCreateTensorDescriptor(&amp;l.normTensorDesc);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudnnCreateTensorDescriptor(&amp;l.dstTensorDesc);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudnnSetTensor4dDescriptor(l.dstTensorDesc,<sp/>CUDNN_TENSOR_NCHW,<sp/>CUDNN_DATA_FLOAT,<sp/>l.batch,<sp/>l.out_c,<sp/>l.out_h,<sp/>l.out_w);<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudnnSetTensor4dDescriptor(l.normTensorDesc,<sp/>CUDNN_TENSOR_NCHW,<sp/>CUDNN_DATA_FLOAT,<sp/>1,<sp/>l.out_c,<sp/>1,<sp/>1);<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>l.activation<sp/>=<sp/>activation;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;connected<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%4d<sp/><sp/>-&gt;<sp/><sp/>%4d\n&quot;</highlight><highlight class="normal">,<sp/>inputs,<sp/>outputs);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l,<sp/><ref refid="structupdate__args" kindref="compound">update_args</ref><sp/>a)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>learning_rate<sp/>=<sp/>a.learning_rate*l.learning_rate_scale;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>momentum<sp/>=<sp/>a.momentum;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>decay<sp/>=<sp/>a.decay;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch<sp/>=<sp/>a.batch;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>axpy_cpu(l.outputs,<sp/>learning_rate/batch,<sp/>l.bias_updates,<sp/>1,<sp/>l.biases,<sp/>1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>scal_cpu(l.outputs,<sp/>momentum,<sp/>l.bias_updates,<sp/>1);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.batch_normalize){</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_cpu(l.outputs,<sp/>learning_rate/batch,<sp/>l.scale_updates,<sp/>1,<sp/>l.scales,<sp/>1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_cpu(l.outputs,<sp/>momentum,<sp/>l.scale_updates,<sp/>1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>axpy_cpu(l.inputs*l.outputs,<sp/>-decay*batch,<sp/>l.weights,<sp/>1,<sp/>l.weight_updates,<sp/>1);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>axpy_cpu(l.inputs*l.outputs,<sp/>learning_rate/batch,<sp/>l.weight_updates,<sp/>1,<sp/>l.weights,<sp/>1);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>scal_cpu(l.inputs*l.outputs,<sp/>momentum,<sp/>l.weight_updates,<sp/>1);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>forward_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_cpu(l.outputs*l.batch,<sp/>0,<sp/>l.output,<sp/>1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>l.batch;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>l.inputs;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>l.outputs;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>net.input;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>l.weights;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>l.output;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>gemm(0,1,m,n,k,1,a,k,b,k,1,c,n);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.batch_normalize){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_batchnorm_layer(l,<sp/>net);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_bias(l.output,<sp/>l.biases,<sp/>l.batch,<sp/>l.outputs,<sp/>1);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>activate_array(l.output,<sp/>l.outputs*l.batch,<sp/>l.activation);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>backward_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient_array(l.output,<sp/>l.outputs*l.batch,<sp/>l.activation,<sp/>l.delta);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.batch_normalize){</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_batchnorm_layer(l,<sp/>net);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_bias(l.bias_updates,<sp/>l.delta,<sp/>l.batch,<sp/>l.outputs,<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>l.outputs;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>l.batch;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>l.inputs;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>l.delta;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>net.input;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c<sp/>=<sp/>l.weight_updates;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>gemm(1,0,m,n,k,1,a,m,b,n,1,c,n);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>l.batch;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>l.outputs;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>l.inputs;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>l.delta;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>l.weights;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>net.delta;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c)<sp/>gemm(0,0,m,n,k,1,a,k,b,n,1,c,n);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>denormalize_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>l.outputs;<sp/>++i){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>l.scales[i]/sqrt(l.rolling_variance[i]<sp/>+<sp/>.000001);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>l.inputs;<sp/>++j){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.weights[i*l.inputs<sp/>+<sp/>j]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.biases[i]<sp/>-=<sp/>l.rolling_mean[i]<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.scales[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.rolling_mean[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.rolling_variance[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>statistics_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.batch_normalize){</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Scales<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_statistics(l.scales,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Rolling<sp/>Mean<sp/>&quot;);</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_statistics(l.rolling_mean,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Rolling<sp/>Variance<sp/>&quot;);</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_statistics(l.rolling_variance,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Biases<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>print_statistics(l.biases,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Weights<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>print_statistics(l.weights,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pull_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_pull_array(l.weights_gpu,<sp/>l.weights,<sp/>l.inputs*l.outputs);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_pull_array(l.biases_gpu,<sp/>l.biases,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_pull_array(l.weight_updates_gpu,<sp/>l.weight_updates,<sp/>l.inputs*l.outputs);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_pull_array(l.bias_updates_gpu,<sp/>l.bias_updates,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.batch_normalize){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_pull_array(l.scales_gpu,<sp/>l.scales,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_pull_array(l.rolling_mean_gpu,<sp/>l.rolling_mean,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_pull_array(l.rolling_variance_gpu,<sp/>l.rolling_variance,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_connected_layer(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_push_array(l.weights_gpu,<sp/>l.weights,<sp/>l.inputs*l.outputs);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_push_array(l.biases_gpu,<sp/>l.biases,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_push_array(l.weight_updates_gpu,<sp/>l.weight_updates,<sp/>l.inputs*l.outputs);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_push_array(l.bias_updates_gpu,<sp/>l.bias_updates,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.batch_normalize){</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(l.scales_gpu,<sp/>l.scales,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(l.rolling_mean_gpu,<sp/>l.rolling_mean,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(l.rolling_variance_gpu,<sp/>l.rolling_variance,<sp/>l.outputs);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_connected_layer_gpu(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l,<sp/><ref refid="structupdate__args" kindref="compound">update_args</ref><sp/>a)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>learning_rate<sp/>=<sp/>a.learning_rate*l.learning_rate_scale;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>momentum<sp/>=<sp/>a.momentum;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>decay<sp/>=<sp/>a.decay;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch<sp/>=<sp/>a.batch;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a.adam){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adam_update_gpu(l.weights_gpu,<sp/>l.weight_updates_gpu,<sp/>l.m_gpu,<sp/>l.v_gpu,<sp/>a.B1,<sp/>a.B2,<sp/>a.eps,<sp/>decay,<sp/>learning_rate,<sp/>l.inputs*l.outputs,<sp/>batch,<sp/>a.t);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adam_update_gpu(l.biases_gpu,<sp/>l.bias_updates_gpu,<sp/>l.bias_m_gpu,<sp/>l.bias_v_gpu,<sp/>a.B1,<sp/>a.B2,<sp/>a.eps,<sp/>decay,<sp/>learning_rate,<sp/>l.outputs,<sp/>batch,<sp/>a.t);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.scales_gpu){</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adam_update_gpu(l.scales_gpu,<sp/>l.scale_updates_gpu,<sp/>l.scale_m_gpu,<sp/>l.scale_v_gpu,<sp/>a.B1,<sp/>a.B2,<sp/>a.eps,<sp/>decay,<sp/>learning_rate,<sp/>l.outputs,<sp/>batch,<sp/>a.t);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(l.outputs,<sp/>learning_rate/batch,<sp/>l.bias_updates_gpu,<sp/>1,<sp/>l.biases_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(l.outputs,<sp/>momentum,<sp/>l.bias_updates_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.batch_normalize){</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(l.outputs,<sp/>learning_rate/batch,<sp/>l.scale_updates_gpu,<sp/>1,<sp/>l.scales_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(l.outputs,<sp/>momentum,<sp/>l.scale_updates_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(l.inputs*l.outputs,<sp/>-decay*batch,<sp/>l.weights_gpu,<sp/>1,<sp/>l.weight_updates_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(l.inputs*l.outputs,<sp/>learning_rate/batch,<sp/>l.weight_updates_gpu,<sp/>1,<sp/>l.weights_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(l.inputs*l.outputs,<sp/>momentum,<sp/>l.weight_updates_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>forward_connected_layer_gpu(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_gpu(l.outputs*l.batch,<sp/>0,<sp/>l.output_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>l.batch;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>l.inputs;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>l.outputs;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>a<sp/>=<sp/>net.input_gpu;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>b<sp/>=<sp/>l.weights_gpu;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>c<sp/>=<sp/>l.output_gpu;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>gemm_gpu(0,1,m,n,k,1,a,k,b,k,1,c,n);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.batch_normalize)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_batchnorm_layer_gpu(l,<sp/>net);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_bias_gpu(l.output_gpu,<sp/>l.biases_gpu,<sp/>l.batch,<sp/>l.outputs,<sp/>1);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>activate_array_gpu(l.output_gpu,<sp/>l.outputs*l.batch,<sp/>l.activation);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>backward_connected_layer_gpu(<ref refid="structlayer" kindref="compound">layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>constrain_gpu(l.outputs*l.batch,<sp/>1,<sp/>l.delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient_array_gpu(l.output_gpu,<sp/>l.outputs*l.batch,<sp/>l.activation,<sp/>l.delta_gpu);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.batch_normalize){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_batchnorm_layer_gpu(l,<sp/>net);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_bias_gpu(l.bias_updates_gpu,<sp/>l.delta_gpu,<sp/>l.batch,<sp/>l.outputs,<sp/>1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>l.outputs;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>l.batch;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>l.inputs;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>a<sp/>=<sp/>l.delta_gpu;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>b<sp/>=<sp/>net.input_gpu;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>c<sp/>=<sp/>l.weight_updates_gpu;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>gemm_gpu(1,0,m,n,k,1,a,m,b,n,1,c,n);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>l.batch;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>l.outputs;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>l.inputs;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>l.delta_gpu;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>l.weights_gpu;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>net.delta_gpu;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c)<sp/>gemm_gpu(0,0,m,n,k,1,a,k,b,n,1,c,n);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/connected_layer.c"/>
  </compounddef>
</doxygen>
