<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_object_recognition_8py" kind="file" language="Python">
    <compoundname>ObjectRecognition.py</compoundname>
    <innerclass refid="class_object_recognition_1_1_b_o_x" prot="public">ObjectRecognition::BOX</innerclass>
    <innerclass refid="class_object_recognition_1_1_i_m_a_g_e" prot="public">ObjectRecognition::IMAGE</innerclass>
    <innerclass refid="class_object_recognition_1_1_m_e_t_a_d_a_t_a" prot="public">ObjectRecognition::METADATA</innerclass>
    <innernamespace refid="namespace_object_recognition">ObjectRecognition</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespace_object_recognition" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;@package<sp/>ObjectRecognition</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">1.<sp/>This<sp/>is<sp/>a<sp/>python<sp/>wrapper<sp/>for<sp/>the<sp/>YOLO<sp/>implementation<sp/>in<sp/>C.</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">2.<sp/>uses<sp/>Ctypes<sp/>as<sp/>a<sp/>way<sp/>to<sp/>access<sp/>C<sp/>module.</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">3.<sp/>libdarknet.so<sp/>is<sp/>a<sp/>pre<sp/>compiled<sp/>library<sp/>which<sp/>works<sp/>only<sp/>on<sp/>Linux!</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>ctypes<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>random</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cv2</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">detect_net=0</highlight></codeline>
<codeline lineno="16"><highlight class="normal">detect_meta<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">sample(probs):</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>sum(probs)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>probs<sp/>=<sp/>[a<sp/>/<sp/>s<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>probs]</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>random.uniform(0,<sp/>1)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(probs)):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>-<sp/>probs[i]</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len(probs)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">c_array(ctype,<sp/>values):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ctype<sp/>*<sp/>len(values))(*values)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_object_recognition_1_1_b_o_x" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_object_recognition_1_1_b_o_x" kindref="compound">BOX</ref>(Structure):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>_fields_<sp/>=<sp/>[(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>c_float),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>c_float),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/>c_float),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/>c_float)]</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_object_recognition_1_1_i_m_a_g_e" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_object_recognition_1_1_i_m_a_g_e" kindref="compound">IMAGE</ref>(Structure):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>_fields_<sp/>=<sp/>[(</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/>c_int),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/>c_int),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/>c_int),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>POINTER(c_float))]</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_object_recognition_1_1_m_e_t_a_d_a_t_a" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_object_recognition_1_1_m_e_t_a_d_a_t_a" kindref="compound">METADATA</ref>(Structure):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>_fields_<sp/>=<sp/>[(</highlight><highlight class="stringliteral">&quot;classes&quot;</highlight><highlight class="normal">,<sp/>c_int),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;names&quot;</highlight><highlight class="normal">,<sp/>POINTER(c_char_p))]</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>lib<sp/>=<sp/>CDLL(&quot;/home/pjreddie/documents/darknet/libdarknet.so&quot;,<sp/>RTLD_GLOBAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">lib<sp/>=<sp/>CDLL(</highlight><highlight class="stringliteral">&quot;../darknet/libdarknet.so&quot;</highlight><highlight class="normal">,<sp/>RTLD_GLOBAL)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">lib.network_width.argtypes<sp/>=<sp/>[c_void_p]</highlight></codeline>
<codeline lineno="58"><highlight class="normal">lib.network_width.restype<sp/>=<sp/>c_int</highlight></codeline>
<codeline lineno="59"><highlight class="normal">lib.network_height.argtypes<sp/>=<sp/>[c_void_p]</highlight></codeline>
<codeline lineno="60"><highlight class="normal">lib.network_height.restype<sp/>=<sp/>c_int</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">predict<sp/>=<sp/>lib.network_predict_p</highlight></codeline>
<codeline lineno="63"><highlight class="normal">predict.argtypes<sp/>=<sp/>[c_void_p,<sp/>POINTER(c_float)]</highlight></codeline>
<codeline lineno="64"><highlight class="normal">predict.restype<sp/>=<sp/>POINTER(c_float)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">make_boxes<sp/>=<sp/>lib.make_boxes</highlight></codeline>
<codeline lineno="67"><highlight class="normal">make_boxes.argtypes<sp/>=<sp/>[c_void_p]</highlight></codeline>
<codeline lineno="68"><highlight class="normal">make_boxes.restype<sp/>=<sp/>POINTER(BOX)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">free_ptrs<sp/>=<sp/>lib.free_ptrs</highlight></codeline>
<codeline lineno="71"><highlight class="normal">free_ptrs.argtypes<sp/>=<sp/>[POINTER(c_void_p),<sp/>c_int]</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">num_boxes<sp/>=<sp/>lib.num_boxes</highlight></codeline>
<codeline lineno="74"><highlight class="normal">num_boxes.argtypes<sp/>=<sp/>[c_void_p]</highlight></codeline>
<codeline lineno="75"><highlight class="normal">num_boxes.restype<sp/>=<sp/>c_int</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">make_probs<sp/>=<sp/>lib.make_probs</highlight></codeline>
<codeline lineno="78"><highlight class="normal">make_probs.argtypes<sp/>=<sp/>[c_void_p]</highlight></codeline>
<codeline lineno="79"><highlight class="normal">make_probs.restype<sp/>=<sp/>POINTER(POINTER(c_float))</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">detect<sp/>=<sp/>lib.network_predict_p</highlight></codeline>
<codeline lineno="82"><highlight class="normal">detect.argtypes<sp/>=<sp/>[c_void_p,<sp/>IMAGE,<sp/>c_float,<sp/>c_float,<sp/>c_float,<sp/>POINTER(BOX),<sp/>POINTER(POINTER(c_float))]</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">reset_rnn<sp/>=<sp/>lib.reset_rnn</highlight></codeline>
<codeline lineno="85"><highlight class="normal">reset_rnn.argtypes<sp/>=<sp/>[c_void_p]</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">load_net<sp/>=<sp/>lib.load_network_p</highlight></codeline>
<codeline lineno="88"><highlight class="normal">load_net.argtypes<sp/>=<sp/>[c_char_p,<sp/>c_char_p,<sp/>c_int]</highlight></codeline>
<codeline lineno="89"><highlight class="normal">load_net.restype<sp/>=<sp/>c_void_p</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">free_image<sp/>=<sp/>lib.free_image</highlight></codeline>
<codeline lineno="92"><highlight class="normal">free_image.argtypes<sp/>=<sp/>[IMAGE]</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">letterbox_image<sp/>=<sp/>lib.letterbox_image</highlight></codeline>
<codeline lineno="95"><highlight class="normal">letterbox_image.argtypes<sp/>=<sp/>[IMAGE,<sp/>c_int,<sp/>c_int]</highlight></codeline>
<codeline lineno="96"><highlight class="normal">letterbox_image.restype<sp/>=<sp/>IMAGE</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">load_meta<sp/>=<sp/>lib.get_metadata</highlight></codeline>
<codeline lineno="99"><highlight class="normal">lib.get_metadata.argtypes<sp/>=<sp/>[c_char_p]</highlight></codeline>
<codeline lineno="100"><highlight class="normal">lib.get_metadata.restype<sp/>=<sp/>METADATA</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">load_image<sp/>=<sp/>lib.load_image_color</highlight></codeline>
<codeline lineno="103"><highlight class="normal">load_image.argtypes<sp/>=<sp/>[c_char_p,<sp/>c_int,<sp/>c_int]</highlight></codeline>
<codeline lineno="104"><highlight class="normal">load_image.restype<sp/>=<sp/>IMAGE</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">predict_image<sp/>=<sp/>lib.network_predict_image</highlight></codeline>
<codeline lineno="107"><highlight class="normal">predict_image.argtypes<sp/>=<sp/>[c_void_p,<sp/>IMAGE]</highlight></codeline>
<codeline lineno="108"><highlight class="normal">predict_image.restype<sp/>=<sp/>POINTER(c_float)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">network_detect<sp/>=<sp/>lib.network_detect</highlight></codeline>
<codeline lineno="111"><highlight class="normal">network_detect.argtypes<sp/>=<sp/>[c_void_p,<sp/>IMAGE,<sp/>c_float,<sp/>c_float,<sp/>c_float,<sp/>POINTER(BOX),<sp/>POINTER(POINTER(c_float))]</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">detect(net,<sp/>meta,<sp/>image,<sp/>thresh=.5,<sp/>hier_thresh=.5,<sp/>nms=.45):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>check<sp/>if<sp/>image<sp/>is<sp/>an<sp/>OpenCV<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(image,<sp/>np.ndarray):</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>GET<sp/>C,H,W,<sp/>and<sp/>DATA<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img<sp/>=<sp/>image.transpose(2,<sp/>0,<sp/>1)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/>h,<sp/>w<sp/>=<sp/>img.shape[0],<sp/>img.shape[1],<sp/>img.shape[2]</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nump_data<sp/>=<sp/>img.ravel()<sp/>/<sp/>255.0</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nump_data<sp/>=<sp/>np.ascontiguousarray(nump_data,<sp/>dtype=np.float32)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>make<sp/>c_type<sp/>pointer<sp/>to<sp/>numpy<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_data<sp/>=<sp/>nump_data.ctypes.data_as(POINTER(c_float))</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>make<sp/>IMAGE<sp/>data<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im<sp/>=<sp/><ref refid="class_object_recognition_1_1_i_m_a_g_e" kindref="compound">IMAGE</ref>(w=w,<sp/>h=h,<sp/>c=c,<sp/>data=ptr_data)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im<sp/>=<sp/>load_image(image,<sp/>0,<sp/>0)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>boxes<sp/>=<sp/>make_boxes(net)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>probs<sp/>=<sp/>make_probs(net)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num_boxes(net)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>network_detect(net,<sp/>im,<sp/>thresh,<sp/>hier_thresh,<sp/>nms,<sp/>boxes,<sp/>probs)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(meta.classes):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>probs[j][i]<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.append((meta.names[i],<sp/>probs[j][i],<sp/>(boxes[j].x,<sp/>boxes[j].y,<sp/>boxes[j].w,<sp/>boxes[j].h)))</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>sorted(res,<sp/>key=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>-x[1])</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>free_image(im)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>free_ptrs(cast(probs,<sp/>POINTER(c_void_p)),<sp/>num)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">draw_results(res,<sp/>img):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>element<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>res:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box<sp/>=<sp/>element[2]</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>int(box[0]<sp/>-<sp/>box[2]<sp/>/<sp/>2.<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>int(box[0]<sp/>+<sp/>box[2]<sp/>/<sp/>2.<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>int(box[1]<sp/>-<sp/>box[3]<sp/>/<sp/>2.<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>int(box[1]<sp/>+<sp/>box[3]<sp/>/<sp/>2.<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand_color<sp/>=<sp/>(random.randint(0,<sp/>255),<sp/>random.randint(0,<sp/>255),<sp/>random.randint(0,<sp/>255))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv2.rectangle(img,<sp/>(xmin,<sp/>ymin),<sp/>(xmax,<sp/>ymax),<sp/>color=rand_color,<sp/>thickness=3,<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv2.putText(img,<sp/>str(element[0])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;%.2f&apos;</highlight><highlight class="normal"><sp/>%<sp/>element[1],</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xmin,<sp/>ymin),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv2.FONT_HERSHEY_SIMPLEX,<sp/>1.5,<sp/>rand_color,<sp/>thickness=3)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>img</highlight></codeline>
<codeline lineno="163"><highlight class="normal">DONE<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Initialize():</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>DONE<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>detect_net<sp/>=<sp/>load_net(</highlight><highlight class="stringliteral">&quot;../darknet/cfg/yolo.cfg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;../darknet/yolo.weights&quot;</highlight><highlight class="normal">,<sp/>0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>detect_meta<sp/>=<sp/>load_meta(</highlight><highlight class="stringliteral">&quot;../darknet/cfg/coco.data&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">detectObjects(frame):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>detect_net:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize()<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Its<sp/>empty&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>LOAD<sp/>DETECTION<sp/>NET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret,<sp/>frame<sp/>=<sp/>CameraFrame.read()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>RUN<sp/>OBJECT<sp/>DETECTION<sp/>ON<sp/>FRAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>frame[0:376,<sp/>0:500]</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>detect_net:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>detect(detect_net,<sp/>detect_meta,<sp/>frame,<sp/>thresh=0.5)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print<sp/>&quot;DETECT&quot;,<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img<sp/>=<sp/>draw_results(result,<sp/>frame)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv2.imshow(</highlight><highlight class="stringliteral">&apos;frame&apos;</highlight><highlight class="normal">,<sp/>img)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv2.waitKey(1)</highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/workspace/roboy_vision/src/ObjectRecognition.py"/>
  </compounddef>
</doxygen>
