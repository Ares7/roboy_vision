<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="softmax__layer_8c" kind="file" language="C++">
    <compoundname>softmax_layer.c</compoundname>
    <includes refid="softmax__layer_8h" local="yes">softmax_layer.h</includes>
    <includes refid="blas_8h" local="yes">blas.h</includes>
    <includes refid="cuda_8h" local="yes">cuda.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="1726">
        <label>box.h</label>
        <link refid="box_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1733">
        <label>assert.h</label>
      </node>
      <node id="1724">
        <label>float.h</label>
      </node>
      <node id="1718">
        <label>stdlib.h</label>
      </node>
      <node id="1732">
        <label>cuda.h</label>
        <link refid="cuda_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1727">
        <label>data.h</label>
        <link refid="data_8h_source"/>
        <childnode refid="1721" relation="include">
        </childnode>
        <childnode refid="1717" relation="include">
        </childnode>
        <childnode refid="1728" relation="include">
        </childnode>
        <childnode refid="1729" relation="include">
        </childnode>
        <childnode refid="1723" relation="include">
        </childnode>
        <childnode refid="1730" relation="include">
        </childnode>
      </node>
      <node id="1722">
        <label>network.h</label>
        <link refid="network_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
        <childnode refid="1723" relation="include">
        </childnode>
        <childnode refid="1716" relation="include">
        </childnode>
        <childnode refid="1727" relation="include">
        </childnode>
        <childnode refid="1730" relation="include">
        </childnode>
      </node>
      <node id="1729">
        <label>list.h</label>
        <link refid="list_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1728">
        <label>matrix.h</label>
        <link refid="matrix_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1717">
        <label>darknet.h</label>
        <link refid="darknet_8h_source"/>
        <childnode refid="1718" relation="include">
        </childnode>
        <childnode refid="1719" relation="include">
        </childnode>
        <childnode refid="1720" relation="include">
        </childnode>
        <childnode refid="1721" relation="include">
        </childnode>
      </node>
      <node id="1716">
        <label>layer.h</label>
        <link refid="layer_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1721">
        <label>pthread.h</label>
      </node>
      <node id="1723">
        <label>image.h</label>
        <link refid="image_8h_source"/>
        <childnode refid="1718" relation="include">
        </childnode>
        <childnode refid="1719" relation="include">
        </childnode>
        <childnode refid="1724" relation="include">
        </childnode>
        <childnode refid="1720" relation="include">
        </childnode>
        <childnode refid="1725" relation="include">
        </childnode>
        <childnode refid="1726" relation="include">
        </childnode>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1720">
        <label>string.h</label>
      </node>
      <node id="1731">
        <label>blas.h</label>
        <link refid="blas_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1714">
        <label>/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c</label>
        <link refid="softmax_layer.c"/>
        <childnode refid="1715" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
        <childnode refid="1724" relation="include">
        </childnode>
        <childnode refid="1725" relation="include">
        </childnode>
        <childnode refid="1718" relation="include">
        </childnode>
        <childnode refid="1719" relation="include">
        </childnode>
        <childnode refid="1733" relation="include">
        </childnode>
      </node>
      <node id="1715">
        <label>softmax_layer.h</label>
        <link refid="softmax__layer_8h_source"/>
        <childnode refid="1716" relation="include">
        </childnode>
        <childnode refid="1722" relation="include">
        </childnode>
      </node>
      <node id="1725">
        <label>math.h</label>
      </node>
      <node id="1730">
        <label>tree.h</label>
        <link refid="tree_8h_source"/>
        <childnode refid="1717" relation="include">
        </childnode>
      </node>
      <node id="1719">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="softmax__layer_8c_1a8cff8d62542982029c5187d95241059b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlayer" kindref="compound">softmax_layer</ref></type>
        <definition>softmax_layer make_softmax_layer</definition>
        <argsstring>(int batch, int inputs, int groups)</argsstring>
        <name>make_softmax_layer</name>
        <param>
          <type>int</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>groups</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c" line="11" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c" bodystart="11" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="softmax__layer_8c_1a38543b2625d6695718b3b57d61f354e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void forward_softmax_layer</definition>
        <argsstring>(const softmax_layer l, network net)</argsstring>
        <name>forward_softmax_layer</name>
        <param>
          <type>const <ref refid="structlayer" kindref="compound">softmax_layer</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structnetwork" kindref="compound">network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c" line="36" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c" bodystart="36" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="softmax__layer_8c_1a555b5ca092347b190432e90d7d89125a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void backward_softmax_layer</definition>
        <argsstring>(const softmax_layer l, network net)</argsstring>
        <name>backward_softmax_layer</name>
        <param>
          <type>const <ref refid="structlayer" kindref="compound">softmax_layer</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structnetwork" kindref="compound">network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c" line="51" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c" bodystart="51" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;softmax_layer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cuda.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/>make_softmax_layer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inputs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>groups)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(inputs%groups<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;softmax<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%4d\n&quot;</highlight><highlight class="normal">,<sp/><sp/>inputs);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/>l<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>l.type<sp/>=<sp/>SOFTMAX;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>l.batch<sp/>=<sp/>batch;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>l.groups<sp/>=<sp/>groups;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>l.inputs<sp/>=<sp/>inputs;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>l.outputs<sp/>=<sp/>inputs;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>l.output<sp/>=<sp/>calloc(inputs*batch,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>l.delta<sp/>=<sp/>calloc(inputs*batch,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>l.forward<sp/>=<sp/>forward_softmax_layer;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>l.backward<sp/>=<sp/>backward_softmax_layer;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>l.forward_gpu<sp/>=<sp/>forward_softmax_layer_gpu;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>l.backward_gpu<sp/>=<sp/>backward_softmax_layer_gpu;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>l.output_gpu<sp/>=<sp/>cuda_make_array(l.output,<sp/>inputs*batch);<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>l.delta_gpu<sp/>=<sp/>cuda_make_array(l.delta,<sp/>inputs*batch);<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>forward_softmax_layer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.softmax_tree){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>l.softmax_tree-&gt;groups;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_size<sp/>=<sp/>l.softmax_tree-&gt;group_size[i];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>softmax_cpu(net.input<sp/>+<sp/>count,<sp/>group_size,<sp/>l.batch,<sp/>l.inputs,<sp/>1,<sp/>0,<sp/>1,<sp/>l.temperature,<sp/>l.output<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>group_size;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>softmax_cpu(net.input,<sp/>l.inputs/l.groups,<sp/>l.batch,<sp/>l.inputs,<sp/>l.groups,<sp/>l.inputs/l.groups,<sp/>1,<sp/>l.temperature,<sp/>l.output);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>backward_softmax_layer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>axpy_cpu(l.inputs*l.batch,<sp/>1,<sp/>l.delta,<sp/>1,<sp/>net.delta,<sp/>1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pull_softmax_layer_output(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/><ref refid="structlayer" kindref="compound">layer</ref>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_pull_array(layer.output_gpu,<sp/>layer.output,<sp/>layer.inputs*layer.batch);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>forward_softmax_layer_gpu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/>l,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.softmax_tree){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>l.softmax_tree-&gt;groups;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_size<sp/>=<sp/>l.softmax_tree-&gt;group_size[i];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>softmax_gpu(net.input_gpu<sp/>+<sp/>count,<sp/>group_size,<sp/>l.batch,<sp/>l.inputs,<sp/>1,<sp/>0,<sp/>1,<sp/>l.temperature,<sp/>l.output_gpu<sp/>+<sp/>count);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>group_size;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.spatial){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>softmax_gpu(net.input_gpu,<sp/>l.c,<sp/>l.batch*l.c,<sp/>l.inputs/l.c,<sp/>l.w*l.h,<sp/>1,<sp/>l.w*l.h,<sp/>1,<sp/>l.output_gpu);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>softmax_gpu(net.input_gpu,<sp/>l.inputs/l.groups,<sp/>l.batch,<sp/>l.inputs,<sp/>l.groups,<sp/>l.inputs/l.groups,<sp/>1,<sp/>l.temperature,<sp/>l.output_gpu);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>backward_softmax_layer_gpu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlayer" kindref="compound">softmax_layer</ref><sp/><ref refid="structlayer" kindref="compound">layer</ref>,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>axpy_gpu(layer.batch*layer.inputs,<sp/>1,<sp/>layer.delta_gpu,<sp/>1,<sp/>net.delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/src/softmax_layer.c"/>
  </compounddef>
</doxygen>
