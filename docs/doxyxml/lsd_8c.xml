<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lsd_8c" kind="file" language="C++">
    <compoundname>lsd.c</compoundname>
    <includes refid="darknet_8h" local="yes">darknet.h</includes>
    <incdepgraph>
      <node id="94">
        <label>stdlib.h</label>
      </node>
      <node id="92">
        <label>/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c</label>
        <link refid="lsd.c"/>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>darknet.h</label>
        <link refid="darknet_8h_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>pthread.h</label>
      </node>
      <node id="96">
        <label>string.h</label>
      </node>
      <node id="95">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lsd_8c_1a0ff5b76eeaf6a6f3ea748d9e7d02de52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_dcgan</definition>
        <argsstring>(char *cfgfile, char *weightfile)</argsstring>
        <name>test_dcgan</name>
        <param>
          <type>char *</type>
          <declname>cfgfile</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>weightfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" line="386" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" bodystart="386" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="lsd_8c_1a8d817b1ff6b8fa827c3e85b965110afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dcgan_batch</definition>
        <argsstring>(network gnet, network anet)</argsstring>
        <name>dcgan_batch</name>
        <param>
          <type><ref refid="structnetwork" kindref="compound">network</ref></type>
          <declname>gnet</declname>
        </param>
        <param>
          <type><ref refid="structnetwork" kindref="compound">network</ref></type>
          <declname>anet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" line="432" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="lsd_8c_1a13f25021852f255bb81359944d2e1a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void train_dcgan</definition>
        <argsstring>(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display, char *train_images)</argsstring>
        <name>train_dcgan</name>
        <param>
          <type>char *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>acfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>aweight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>clear</declname>
        </param>
        <param>
          <type>int</type>
          <declname>display</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>train_images</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" line="438" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" bodystart="438" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="lsd_8c_1a2ae443574ec61dc746fa85f65d6d1cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void train_colorizer</definition>
        <argsstring>(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display)</argsstring>
        <name>train_colorizer</name>
        <param>
          <type>char *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>acfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>aweight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>clear</declname>
        </param>
        <param>
          <type>int</type>
          <declname>display</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" line="619" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" bodystart="619" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="lsd_8c_1abcf2acb0200df9fc8e4d96d998658bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_lsd</definition>
        <argsstring>(char *cfgfile, char *weightfile, char *filename, int gray)</argsstring>
        <name>test_lsd</name>
        <param>
          <type>char *</type>
          <declname>cfgfile</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>weightfile</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" line="1048" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" bodystart="1048" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="lsd_8c_1ab48437873371bf1e3ff2b7714109f178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run_lsd</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>run_lsd</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" line="1107" column="1" bodyfile="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c" bodystart="1107" bodyend="1135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;darknet.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">void<sp/>train_lsd3(char<sp/>*fcfg,<sp/>char<sp/>*fweight,<sp/>char<sp/>*gcfg,<sp/>char<sp/>*gweight,<sp/>char<sp/>*acfg,<sp/>char<sp/>*aweight,<sp/>int<sp/>clear)</highlight></codeline>
<codeline lineno="5"><highlight class="comment">{</highlight></codeline>
<codeline lineno="6"><highlight class="comment">#ifdef<sp/>GPU</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/imagenet/imagenet1k.train.list&quot;;</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>//char<sp/>*style_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*style_images<sp/>=<sp/>&quot;/home/pjreddie/zelda.txt&quot;;</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*backup_directory<sp/>=<sp/>&quot;/home/pjreddie/backup/&quot;;</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>fnet<sp/>=<sp/>load_network(fcfg,<sp/>fweight,<sp/>clear);</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>gnet<sp/>=<sp/>load_network(gcfg,<sp/>gweight,<sp/>clear);</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>anet<sp/>=<sp/>load_network(acfg,<sp/>aweight,<sp/>clear);</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*gbase<sp/>=<sp/>basecfg(gcfg);</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*abase<sp/>=<sp/>basecfg(acfg);</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;Learning<sp/>Rate:<sp/>%g,<sp/>Momentum:<sp/>%g,<sp/>Decay:<sp/>%g\n&quot;,<sp/>gnet.learning_rate,<sp/>gnet.momentum,<sp/>gnet.decay);</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>imgs<sp/>=<sp/>gnet.batch*gnet.subdivisions;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>*gnet.seen/imgs;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>train,<sp/>tbuffer;</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>style,<sp/>sbuffer;</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>*slist<sp/>=<sp/>get_paths(style_images);</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>**spaths<sp/>=<sp/>(char<sp/>**)list_to_array(slist);</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>*tlist<sp/>=<sp/>get_paths(train_images);</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>**tpaths<sp/>=<sp/>(char<sp/>**)list_to_array(tlist);</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>load_args<sp/>targs=<sp/>get_base_args(gnet);</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.paths<sp/>=<sp/>tpaths;</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.m<sp/>=<sp/>tlist-&gt;size;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.d<sp/>=<sp/>&amp;tbuffer;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*ls[1]<sp/>=<sp/>{&quot;zelda&quot;};</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>targs.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>load_args<sp/>sargs<sp/>=<sp/>get_base_args(gnet);</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.paths<sp/>=<sp/>spaths;</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.m<sp/>=<sp/>slist-&gt;size;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.d<sp/>=<sp/>&amp;sbuffer;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>sargs.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_t<sp/>tload_thread<sp/>=<sp/>load_data_in_thread(targs);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_t<sp/>sload_thread<sp/>=<sp/>load_data_in_thread(sargs);</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>aloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>floss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>fnet.train=1;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>x_size<sp/>=<sp/>fnet.inputs*fnet.batch;</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>y_size<sp/>=<sp/>fnet.truths*fnet.batch;</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*X<sp/>=<sp/>calloc(x_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*y<sp/>=<sp/>calloc(y_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>ax_size<sp/>=<sp/>anet.inputs*anet.batch;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>ay_size<sp/>=<sp/>anet.truths*anet.batch;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>fill_gpu(ay_size,<sp/>.9,<sp/>anet.truth_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>anet.delta_gpu<sp/>=<sp/>cuda_make_array(0,<sp/>ax_size);</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>anet.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>gx_size<sp/>=<sp/>gnet.inputs*gnet.batch;</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>gy_size<sp/>=<sp/>gnet.truths*gnet.batch;</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.input<sp/>=<sp/>cuda_make_array(0,<sp/>gx_size);</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.truth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>(get_current_batch(gnet)<sp/>&lt;<sp/>gnet.max_batches)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(tload_thread,<sp/>0);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(sload_thread,<sp/>0);</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train<sp/>=<sp/>tbuffer;</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style<sp/>=<sp/>sbuffer;</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tload_thread<sp/>=<sp/>load_data_in_thread(targs);</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sload_thread<sp/>=<sp/>load_data_in_thread(sargs);</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Loaded:<sp/>%lf<sp/>seconds\n&quot;,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>generated<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>floss<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>fnet.subdivisions;<sp/>++j){</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer<sp/>imlayer<sp/>=<sp/>gnet.layers[gnet.n<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(train,<sp/>fnet.batch,<sp/>j*fnet.batch,<sp/>X,<sp/>y);</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(fstate.input,<sp/>X,<sp/>x_size);</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(gstate.input,<sp/>X,<sp/>gx_size);</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gnet.seen<sp/>+=<sp/>gnet.batch;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(fnet,<sp/>fstate);</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>*feats<sp/>=<sp/>fnet.layers[fnet.n<sp/>-<sp/>2].output_gpu;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_gpu(y_size,<sp/>feats,<sp/>1,<sp/>fstate.truth,<sp/>1);</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(gnet,<sp/>gstate);</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>*gen<sp/>=<sp/>gnet.layers[gnet.n-1].output_gpu;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_gpu(x_size,<sp/>gen,<sp/>1,<sp/>fstate.input,<sp/>1);</highlight></codeline>
<codeline lineno="110"><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(x_size,<sp/>0,<sp/>fstate.delta,<sp/>1);</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(fnet,<sp/>fstate);</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(fnet,<sp/>fstate);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//HERE</highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.input<sp/>=<sp/>gen;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(ax_size,<sp/>0,<sp/>astate.delta,<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(anet,<sp/>astate);</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(anet,<sp/>astate);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>*delta<sp/>=<sp/>imlayer.delta_gpu;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(x_size,<sp/>0,<sp/>delta,<sp/>1);</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(x_size,<sp/>100,<sp/>astate.delta,<sp/>1);</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(x_size,<sp/>.001,<sp/>fstate.delta,<sp/>1);</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(x_size,<sp/>1,<sp/>fstate.delta,<sp/>1,<sp/>delta,<sp/>1);</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(x_size,<sp/>1,<sp/>astate.delta,<sp/>1,<sp/>delta,<sp/>1);</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//fill_gpu(x_size,<sp/>0,<sp/>delta,<sp/>1);</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//cuda_push_array(delta,<sp/>X,<sp/>x_size);</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//axpy_gpu(x_size,<sp/>-1,<sp/>imlayer.output_gpu,<sp/>1,<sp/>delta,<sp/>1);</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//printf(&quot;pix<sp/>error:<sp/>%f\n&quot;,<sp/>cuda_mag_array(delta,<sp/>x_size));</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;fea<sp/>error:<sp/>%f\n&quot;,<sp/>cuda_mag_array(fstate.delta,<sp/>x_size));</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;adv<sp/>error:<sp/>%f\n&quot;,<sp/>cuda_mag_array(astate.delta,<sp/>x_size));</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//axpy_gpu(x_size,<sp/>1,<sp/>astate.delta,<sp/>1,<sp/>delta,<sp/>1);</highlight></codeline>
<codeline lineno="135"><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(gnet,<sp/>gstate);</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floss<sp/>+=<sp/>get_network_cost(fnet)<sp/>/(fnet.subdivisions*fnet.batch);</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_pull_array(imlayer.output_gpu,<sp/>imlayer.output,<sp/>imlayer.outputs*imlayer.batch);</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>gnet.batch;<sp/>++k){</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>j*gnet.batch<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_cpu(imlayer.outputs,<sp/>imlayer.output<sp/>+<sp/>k*imlayer.outputs,<sp/>1,<sp/>generated.X.vals[index],<sp/>1);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated.y.vals[index][0]<sp/>=<sp/>.1;</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style.y.vals[index][0]<sp/>=<sp/>.9;</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>sim<sp/>=<sp/>float_to_image(anet.w,<sp/>anet.h,<sp/>anet.c,<sp/>style.X.vals[j]);</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(sim,<sp/>&quot;style&quot;);</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(0);</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>harmless_update_network_gpu(anet);</highlight></codeline>
<codeline lineno="158"><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>merge<sp/>=<sp/>concat_data(style,<sp/>generated);</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>randomize_data(merge);</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>aloss<sp/>=<sp/>train_network(anet,<sp/>merge);</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(gnet);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(merge);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(train);</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(generated);</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(style);</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aloss_avg<sp/>&lt;<sp/>0)<sp/>aloss_avg<sp/>=<sp/>aloss;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(floss_avg<sp/>&lt;<sp/>0)<sp/>floss_avg<sp/>=<sp/>floss;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aloss_avg<sp/>=<sp/>aloss_avg*.9<sp/>+<sp/>aloss*.1;</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floss_avg<sp/>=<sp/>floss_avg*.9<sp/>+<sp/>floss*.1;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%d:<sp/>gen:<sp/>%f,<sp/>adv:<sp/>%f<sp/>|<sp/>gen_avg:<sp/>%f,<sp/>adv_avg:<sp/>%f,<sp/>%f<sp/>rate,<sp/>%lf<sp/>seconds,<sp/>%d<sp/>images\n&quot;,<sp/>i,<sp/>floss,<sp/>aloss,<sp/>floss_avg,<sp/>aloss_avg,<sp/>get_current_rate(gnet),<sp/>sec(clock()-time),<sp/>i*imgs);</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%1000==0){</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>gbase,<sp/>i);</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(gnet,<sp/>buff);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>abase,<sp/>i);</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%100==0){</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>gbase);</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(gnet,<sp/>buff);</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>abase);</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="191"><highlight class="comment">}</highlight></codeline>
<codeline lineno="192"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="195"><highlight class="comment">void<sp/>train_pix2pix(char<sp/>*cfg,<sp/>char<sp/>*weight,<sp/>char<sp/>*acfg,<sp/>char<sp/>*aweight,<sp/>int<sp/>clear)</highlight></codeline>
<codeline lineno="196"><highlight class="comment">{</highlight></codeline>
<codeline lineno="197"><highlight class="comment">#ifdef<sp/>GPU</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/train1.txt&quot;;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/imagenet/imagenet1k.train.list&quot;;</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*backup_directory<sp/>=<sp/>&quot;/home/pjreddie/backup/&quot;;</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*base<sp/>=<sp/>basecfg(cfg);</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*abase<sp/>=<sp/>basecfg(acfg);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>base);</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>net<sp/>=<sp/>load_network(cfg,<sp/>weight,<sp/>clear);</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>anet<sp/>=<sp/>load_network(acfg,<sp/>aweight,<sp/>clear);</highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>layer<sp/>imlayer<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>net.n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(net.layers[i].out_c<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imlayer<sp/>=<sp/>net.layers[i];</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;Learning<sp/>Rate:<sp/>%g,<sp/>Momentum:<sp/>%g,<sp/>Decay:<sp/>%g\n&quot;,<sp/>net.learning_rate,<sp/>net.momentum,<sp/>net.decay);</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>imgs<sp/>=<sp/>net.batch*net.subdivisions;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>*net.seen/imgs;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>train,<sp/>buffer;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>*plist<sp/>=<sp/>get_paths(train_images);</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/>//int<sp/>N<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>**paths<sp/>=<sp/>(char<sp/>**)list_to_array(plist);</highlight></codeline>
<codeline lineno="227"><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>load_args<sp/>args<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>args.w<sp/>=<sp/>net.w;</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>args.h<sp/>=<sp/>net.h;</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>args.paths<sp/>=<sp/>paths;</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>args.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/>args.m<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>args.d<sp/>=<sp/>&amp;buffer;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/>args.min<sp/>=<sp/>net.min_crop;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>args.max<sp/>=<sp/>net.max_crop;</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>args.angle<sp/>=<sp/>net.angle;</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/>args.aspect<sp/>=<sp/>net.aspect;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/>args.exposure<sp/>=<sp/>net.exposure;</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/>args.saturation<sp/>=<sp/>net.saturation;</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>args.hue<sp/>=<sp/>net.hue;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>args.size<sp/>=<sp/>net.w;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/>args.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>args.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*ls[1]<sp/>=<sp/>{&quot;coco&quot;};</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>args.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_t<sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>network_state<sp/>gstate<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.net<sp/>=<sp/>net;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>x_size<sp/>=<sp/>get_network_input_size(net)*net.batch;</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>y_size<sp/>=<sp/>x_size;</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.input<sp/>=<sp/>cuda_make_array(0,<sp/>x_size);</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.truth<sp/>=<sp/>cuda_make_array(0,<sp/>y_size);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*pixs<sp/>=<sp/>calloc(x_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*graypixs<sp/>=<sp/>calloc(x_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*y<sp/>=<sp/>calloc(y_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="264"><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>network_state<sp/>astate<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.net<sp/>=<sp/>anet;</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>ay_size<sp/>=<sp/>get_network_output_size(anet)*anet.batch;</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.input<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.truth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="273"><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*imerror<sp/>=<sp/>cuda_make_array(0,<sp/>imlayer.outputs);</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*ones_gpu<sp/>=<sp/>cuda_make_array(0,<sp/>ay_size);</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>fill_gpu(ay_size,<sp/>.9,<sp/>ones_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="277"><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>aloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>gloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/>//data<sp/>generated<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>(get_current_batch(net)<sp/>&lt;<sp/>net.max_batches)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(load_thread,<sp/>0);</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Loaded:<sp/>%lf<sp/>seconds\n&quot;,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="291"><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>gray<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>imgs;<sp/>++j){</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>gim<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>net.c,<sp/>gray.X.vals[j]);</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grayscale_image_3c(gim);</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train.y.vals[j][0]<sp/>=<sp/>.9;</highlight></codeline>
<codeline lineno="297"><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>yim<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>net.c,<sp/>train.X.vals[j]);</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//rgb_to_yuv(yim);</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>gloss<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>net.subdivisions;<sp/>++j){</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(train,<sp/>net.batch,<sp/>j*net.batch,<sp/>pixs,<sp/>y);</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(gray,<sp/>net.batch,<sp/>j*net.batch,<sp/>graypixs,<sp/>y);</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(gstate.input,<sp/>graypixs,<sp/>x_size);</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(gstate.truth,<sp/>pixs,<sp/>y_size);</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>origi<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>3,<sp/>pixs);</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>grayi<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>3,<sp/>graypixs);</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(grayi,<sp/>&quot;gray&quot;);</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(origi,<sp/>&quot;orig&quot;);</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(0);</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*net.seen<sp/>+=<sp/>net.batch;</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(net,<sp/>gstate);</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(imlayer.outputs,<sp/>0,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.input<sp/>=<sp/>imlayer.output_gpu;</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.delta<sp/>=<sp/>imerror;</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.truth<sp/>=<sp/>ones_gpu;</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(anet,<sp/>astate);</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(anet,<sp/>astate);</highlight></codeline>
<codeline lineno="327"><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs,<sp/>.1,<sp/>net.layers[net.n-1].delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="329"><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(net,<sp/>gstate);</highlight></codeline>
<codeline lineno="331"><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs,<sp/>1000,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="333"><highlight class="comment"></highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;realness<sp/>%f\n&quot;,<sp/>cuda_mag_array(imerror,<sp/>imlayer.outputs));</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;features<sp/>%f\n&quot;,<sp/>cuda_mag_array(net.layers[net.n-1].delta_gpu,<sp/>imlayer.outputs));</highlight></codeline>
<codeline lineno="336"><highlight class="comment"></highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(imlayer.outputs,<sp/>1,<sp/>imerror,<sp/>1,<sp/>imlayer.delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="338"><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gloss<sp/>+=<sp/>get_network_cost(net)<sp/>/(net.subdivisions*net.batch);</highlight></codeline>
<codeline lineno="340"><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_pull_array(imlayer.output_gpu,<sp/>imlayer.output,<sp/>imlayer.outputs*imlayer.batch);</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>net.batch;<sp/>++k){</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>j*net.batch<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_cpu(imlayer.outputs,<sp/>imlayer.output<sp/>+<sp/>k*imlayer.outputs,<sp/>1,<sp/>gray.X.vals[index],<sp/>1);</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gray.y.vals[index][0]<sp/>=<sp/>.1;</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>harmless_update_network_gpu(anet);</highlight></codeline>
<codeline lineno="349"><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>merge<sp/>=<sp/>concat_data(train,<sp/>gray);</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>randomize_data(merge);</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>aloss<sp/>=<sp/>train_network(anet,<sp/>merge);</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(net);</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(anet);</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(merge);</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(train);</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(gray);</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aloss_avg<sp/>&lt;<sp/>0)<sp/>aloss_avg<sp/>=<sp/>aloss;</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aloss_avg<sp/>=<sp/>aloss_avg*.9<sp/>+<sp/>aloss*.1;</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gloss_avg<sp/>=<sp/>gloss_avg*.9<sp/>+<sp/>gloss*.1;</highlight></codeline>
<codeline lineno="362"><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%d:<sp/>gen:<sp/>%f,<sp/>adv:<sp/>%f<sp/>|<sp/>gen_avg:<sp/>%f,<sp/>adv_avg:<sp/>%f,<sp/>%f<sp/>rate,<sp/>%lf<sp/>seconds,<sp/>%d<sp/>images\n&quot;,<sp/>i,<sp/>gloss,<sp/>aloss,<sp/>gloss_avg,<sp/>aloss_avg,<sp/>get_current_rate(net),<sp/>sec(clock()-time),<sp/>i*imgs);</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%1000==0){</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>base,<sp/>i);</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>abase,<sp/>i);</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%100==0){</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>abase);</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_final.weights&quot;,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="382"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="383"><highlight class="comment">}</highlight></codeline>
<codeline lineno="384"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_dcgan(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cfgfile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*weightfile)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net<sp/>=<sp/>parse_network_cfg(cfgfile);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(weightfile){</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_weights(&amp;net,<sp/>weightfile);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>set_batch_network(&amp;net,<sp/>1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(2222222);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input<sp/>=<sp/>buff;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>imlayer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>net.n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net.layers[i].out_c<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imlayer<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>im<sp/>=<sp/>make_image(net.w,<sp/>net.h,<sp/>net.c);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>im.w*im.h*im.c;<sp/>++i){</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im.data[i]<sp/>=<sp/>rand_normal();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*X<sp/>=<sp/>im.data;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network_predict(net,<sp/>X);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>out<sp/>=<sp/>get_network_image_layer(net,<sp/>imlayer);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yuv_to_rgb(out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize_image(out);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Predicted<sp/>in<sp/>%f<sp/>seconds.\n&quot;</highlight><highlight class="normal">,<sp/>input,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(out,<sp/></highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_image(out,<sp/></highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(0);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_image(im);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dcgan_batch(<ref refid="structnetwork" kindref="compound">network</ref><sp/>gnet,<sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>anet)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>*input<sp/>=<sp/>calloc(x_size,<sp/>sizeof(float));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>train_dcgan(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*weight,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*acfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aweight,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clear,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>display,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*train_images)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/train1.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/imagenet/imagenet1k.train.list&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;data/64.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;data/alp.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;data/cifar.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*backup_directory<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/home/pjreddie/backup/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base<sp/>=<sp/>basecfg(cfg);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*abase<sp/>=<sp/>basecfg(acfg);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>base);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>gnet<sp/>=<sp/>load_network(cfg,<sp/>weight,<sp/>clear);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>anet<sp/>=<sp/>load_network(acfg,<sp/>aweight,<sp/>clear);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>orig_rate<sp/>=<sp/>anet.learning_rate;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlayer" kindref="compound">layer</ref><sp/>imlayer<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gnet.n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gnet.layers[i].out_c<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imlayer<sp/>=<sp/>gnet.layers[i];</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Learning<sp/>Rate:<sp/>%g,<sp/>Momentum:<sp/>%g,<sp/>Decay:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>gnet.learning_rate,<sp/>gnet.momentum,<sp/>gnet.decay);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgs<sp/>=<sp/>gnet.batch*gnet.subdivisions;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>*gnet.seen/imgs;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">data</ref><sp/>train,<sp/>buffer;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist" kindref="compound">list</ref><sp/>*plist<sp/>=<sp/>get_paths(train_images);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>N<sp/>=<sp/>plist-&gt;size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**paths<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)list_to_array(plist);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structload__args" kindref="compound">load_args</ref><sp/>args=<sp/>get_base_args(anet);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>args.paths<sp/>=<sp/>paths;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>args.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>args.m<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>args.d<sp/>=<sp/>&amp;buffer;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>args.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>args.threads=16;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>args.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ls[2]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;imagenet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;zzzzzzzz&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>args.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_t<sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>gnet.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>anet.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x_size<sp/>=<sp/>gnet.inputs*gnet.batch;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_size<sp/>=<sp/>gnet.truths*gnet.batch;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*imerror<sp/>=<sp/>cuda_make_array(0,<sp/>y_size);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>ay_size<sp/>=<sp/>anet.truths*anet.batch;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>generated<sp/>=<sp/>copy_data(train);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(get_current_batch(gnet)<sp/>&lt;<sp/>gnet.max_batches)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(load_thread,<sp/>0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//translate_data_rows(train,<sp/>-.5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scale_data_rows(train,<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Loaded:<sp/>%lf<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">data</ref><sp/>gen<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>imgs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train.y.vals[j][0]<sp/>=<sp/>.95;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen.y.vals[j][0]<sp/>=<sp/>.05;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gnet.subdivisions;<sp/>++j){</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(train,<sp/>gnet.batch,<sp/>j*gnet.batch,<sp/>gnet.truth,<sp/>0);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(z<sp/>=<sp/>0;<sp/>z<sp/>&lt;<sp/>x_size;<sp/>++z){</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gnet.input[z]<sp/>=<sp/>rand_normal();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(gnet.input_gpu,<sp/>gnet.input,<sp/>x_size);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(gnet.truth_gpu,<sp/>gnet.truth,<sp/>y_size);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gnet.seen<sp/>+=<sp/>gnet.batch;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(gnet);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(imlayer.outputs*imlayer.batch,<sp/>0,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(anet.truths*anet.batch,<sp/>.95,<sp/>anet.truth_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_gpu(anet.inputs*anet.batch,<sp/>imlayer.output_gpu,<sp/>1,<sp/>anet.input_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anet.delta_gpu<sp/>=<sp/>imerror;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(anet);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(anet);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>genaloss<sp/>=<sp/>*anet.cost<sp/>/<sp/>anet.batch;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%f\n&quot;</highlight><highlight class="normal">,<sp/>genaloss);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs*imlayer.batch,<sp/>1,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs*imlayer.batch,<sp/>.00,<sp/>gnet.layers[gnet.n-1].delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;realness<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>cuda_mag_array(imerror,<sp/>imlayer.outputs*imlayer.batch));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;features<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>cuda_mag_array(gnet.layers[gnet.n-1].delta_gpu,<sp/>imlayer.outputs*imlayer.batch));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(imlayer.outputs*imlayer.batch,<sp/>1,<sp/>imerror,<sp/>1,<sp/>gnet.layers[gnet.n-1].delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(gnet);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>gnet.batch;<sp/>++k){</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>j*gnet.batch<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_cpu(gnet.outputs,<sp/>gnet.output<sp/>+<sp/>k*gnet.outputs,<sp/>1,<sp/>gen.X.vals[index],<sp/>1);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>harmless_update_network_gpu(anet);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">data</ref><sp/>merge<sp/>=<sp/>concat_data(train,<sp/>gen);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//randomize_data(merge);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aloss<sp/>=<sp/>train_network(anet,<sp/>merge);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//translate_image(im,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scale_image(im,<sp/>.5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//translate_image(im2,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scale_image(im2,<sp/>.5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>OPENCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(display){</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>im<sp/>=<sp/>float_to_image(anet.w,<sp/>anet.h,<sp/>anet.c,<sp/>gen.X.vals[0]);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>im2<sp/>=<sp/>float_to_image(anet.w,<sp/>anet.h,<sp/>anet.c,<sp/>train.X.vals[0]);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(im,<sp/></highlight><highlight class="stringliteral">&quot;gen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(im2,<sp/></highlight><highlight class="stringliteral">&quot;train&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(50);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(aloss<sp/>&lt;<sp/>.1){</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anet.learning_rate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(aloss<sp/>&gt;<sp/>.3){</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anet.learning_rate<sp/>=<sp/>orig_rate;</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(gnet);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(merge);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(train);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(gen);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aloss_avg<sp/>&lt;<sp/>0)<sp/>aloss_avg<sp/>=<sp/>aloss;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aloss_avg<sp/>=<sp/>aloss_avg*.9<sp/>+<sp/>aloss*.1;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d:<sp/>adv:<sp/>%f<sp/>|<sp/>adv_avg:<sp/>%f,<sp/>%f<sp/>rate,<sp/>%lf<sp/>seconds,<sp/>%d<sp/>images\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>aloss,<sp/>aloss_avg,<sp/>get_current_rate(gnet),<sp/>sec(clock()-time),<sp/>i*imgs);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i%10000==0){</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s_%d.weights&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>base,<sp/>i);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(gnet,<sp/>buff);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s_%d.weights&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>abase,<sp/>i);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i%1000==0){</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.backup&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(gnet,<sp/>buff);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.backup&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>abase);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s_final.weights&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>save_weights(gnet,<sp/>buff);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>train_colorizer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*weight,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*acfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aweight,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clear,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>display)</highlight></codeline>
<codeline lineno="620"><highlight class="normal">{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/train1.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*train_images<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/home/pjreddie/data/imagenet/imagenet1k.train.list&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*backup_directory<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/home/pjreddie/backup/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base<sp/>=<sp/>basecfg(cfg);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*abase<sp/>=<sp/>basecfg(acfg);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>base);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net<sp/>=<sp/>load_network(cfg,<sp/>weight,<sp/>clear);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>anet<sp/>=<sp/>load_network(acfg,<sp/>aweight,<sp/>clear);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlayer" kindref="compound">layer</ref><sp/>imlayer<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>net.n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net.layers[i].out_c<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imlayer<sp/>=<sp/>net.layers[i];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Learning<sp/>Rate:<sp/>%g,<sp/>Momentum:<sp/>%g,<sp/>Decay:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>net.learning_rate,<sp/>net.momentum,<sp/>net.decay);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgs<sp/>=<sp/>net.batch*net.subdivisions;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>*net.seen/imgs;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">data</ref><sp/>train,<sp/>buffer;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlist" kindref="compound">list</ref><sp/>*plist<sp/>=<sp/>get_paths(train_images);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>N<sp/>=<sp/>plist-&gt;size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**paths<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)list_to_array(plist);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structload__args" kindref="compound">load_args</ref><sp/>args=<sp/>get_base_args(net);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>args.paths<sp/>=<sp/>paths;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>args.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>args.m<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>args.d<sp/>=<sp/>&amp;buffer;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>args.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>args.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ls[2]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;imagenet&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>args.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_t<sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x_size<sp/>=<sp/>net.inputs*net.batch;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>y_size<sp/>=<sp/>x_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>net.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>net.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*pixs<sp/>=<sp/>calloc(x_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*graypixs<sp/>=<sp/>calloc(x_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>*y<sp/>=<sp/>calloc(y_size,<sp/>sizeof(float));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>ay_size<sp/>=<sp/>anet.outputs*anet.batch;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>anet.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>anet.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*imerror<sp/>=<sp/>cuda_make_array(0,<sp/>imlayer.outputs*imlayer.batch);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>generated<sp/>=<sp/>copy_data(train);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(get_current_batch(net)<sp/>&lt;<sp/>net.max_batches)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(load_thread,<sp/>0);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Loaded:<sp/>%lf<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">data</ref><sp/>gray<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>imgs;<sp/>++j){</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>gim<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>net.c,<sp/>gray.X.vals[j]);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grayscale_image_3c(gim);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train.y.vals[j][0]<sp/>=<sp/>.95;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gray.y.vals[j][0]<sp/>=<sp/>.05;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gloss<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>net.subdivisions;<sp/>++j){</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(train,<sp/>net.batch,<sp/>j*net.batch,<sp/>pixs,<sp/>0);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(gray,<sp/>net.batch,<sp/>j*net.batch,<sp/>graypixs,<sp/>0);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(net.input_gpu,<sp/>graypixs,<sp/>net.inputs*net.batch);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(net.truth_gpu,<sp/>pixs,<sp/>net.truths*net.batch);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>origi<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>3,<sp/>pixs);</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image<sp/>grayi<sp/>=<sp/>float_to_image(net.w,<sp/>net.h,<sp/>3,<sp/>graypixs);</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(grayi,<sp/>&quot;gray&quot;);</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(origi,<sp/>&quot;orig&quot;);</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(0);</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*net.seen<sp/>+=<sp/>net.batch;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(net);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(imlayer.outputs*imlayer.batch,<sp/>0,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_gpu(anet.inputs*anet.batch,<sp/>imlayer.output_gpu,<sp/>1,<sp/>anet.input_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(anet.inputs*anet.batch,<sp/>.95,<sp/>anet.truth_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anet.delta_gpu<sp/>=<sp/>imerror;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(anet);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(anet);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs*imlayer.batch,<sp/>1./100.,<sp/>net.layers[net.n-1].delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs*imlayer.batch,<sp/>1,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;realness<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>cuda_mag_array(imerror,<sp/>imlayer.outputs*imlayer.batch));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;features<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>cuda_mag_array(net.layers[net.n-1].delta_gpu,<sp/>imlayer.outputs*imlayer.batch));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(imlayer.outputs*imlayer.batch,<sp/>1,<sp/>imerror,<sp/>1,<sp/>net.layers[net.n-1].delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(net);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gloss<sp/>+=<sp/>*net.cost<sp/>/(net.subdivisions*net.batch);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>net.batch;<sp/>++k){</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>j*net.batch<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_cpu(imlayer.outputs,<sp/>imlayer.output<sp/>+<sp/>k*imlayer.outputs,<sp/>1,<sp/>gray.X.vals[index],<sp/>1);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>harmless_update_network_gpu(anet);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">data</ref><sp/>merge<sp/>=<sp/>concat_data(train,<sp/>gray);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//randomize_data(merge);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aloss<sp/>=<sp/>train_network(anet,<sp/>merge);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(net);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>OPENCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(display){</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>im<sp/>=<sp/>float_to_image(anet.w,<sp/>anet.h,<sp/>anet.c,<sp/>gray.X.vals[0]);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>im2<sp/>=<sp/>float_to_image(anet.w,<sp/>anet.h,<sp/>anet.c,<sp/>train.X.vals[0]);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(im,<sp/></highlight><highlight class="stringliteral">&quot;gen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(im2,<sp/></highlight><highlight class="stringliteral">&quot;train&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(50);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(merge);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(train);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(gray);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aloss_avg<sp/>&lt;<sp/>0)<sp/>aloss_avg<sp/>=<sp/>aloss;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aloss_avg<sp/>=<sp/>aloss_avg*.9<sp/>+<sp/>aloss*.1;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gloss_avg<sp/>=<sp/>gloss_avg*.9<sp/>+<sp/>gloss*.1;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d:<sp/>gen:<sp/>%f,<sp/>adv:<sp/>%f<sp/>|<sp/>gen_avg:<sp/>%f,<sp/>adv_avg:<sp/>%f,<sp/>%f<sp/>rate,<sp/>%lf<sp/>seconds,<sp/>%d<sp/>images\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>gloss,<sp/>aloss,<sp/>gloss_avg,<sp/>aloss_avg,<sp/>get_current_rate(net),<sp/>sec(clock()-time),<sp/>i*imgs);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i%1000==0){</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s_%d.weights&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>base,<sp/>i);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s_%d.weights&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>abase,<sp/>i);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i%100==0){</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.backup&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.backup&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>abase);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buff,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s_final.weights&quot;</highlight><highlight class="normal">,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="792"><highlight class="comment">void<sp/>train_lsd2(char<sp/>*cfgfile,<sp/>char<sp/>*weightfile,<sp/>char<sp/>*acfgfile,<sp/>char<sp/>*aweightfile,<sp/>int<sp/>clear)</highlight></codeline>
<codeline lineno="793"><highlight class="comment">{</highlight></codeline>
<codeline lineno="794"><highlight class="comment">#ifdef<sp/>GPU</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*backup_directory<sp/>=<sp/>&quot;/home/pjreddie/backup/&quot;;</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*base<sp/>=<sp/>basecfg(cfgfile);</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>base);</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>net<sp/>=<sp/>parse_network_cfg(cfgfile);</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/>if(weightfile){</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_weights(&amp;net,<sp/>weightfile);</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/>if(clear)<sp/>*net.seen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="805"><highlight class="comment"></highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*abase<sp/>=<sp/>basecfg(acfgfile);</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>anet<sp/>=<sp/>parse_network_cfg(acfgfile);</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/>if(aweightfile){</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_weights(&amp;anet,<sp/>aweightfile);</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/>if(clear)<sp/>*anet.seen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="812"><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/>layer<sp/>imlayer<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>net.n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(net.layers[i].out_c<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imlayer<sp/>=<sp/>net.layers[i];</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="comment"></highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;Learning<sp/>Rate:<sp/>%g,<sp/>Momentum:<sp/>%g,<sp/>Decay:<sp/>%g\n&quot;,<sp/>net.learning_rate,<sp/>net.momentum,<sp/>net.decay);</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>imgs<sp/>=<sp/>net.batch*net.subdivisions;</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>*net.seen/imgs;</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>train,<sp/>buffer;</highlight></codeline>
<codeline lineno="826"><highlight class="comment"></highlight></codeline>
<codeline lineno="827"><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>*plist<sp/>=<sp/>get_paths(train_images);</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/>//int<sp/>N<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>**paths<sp/>=<sp/>(char<sp/>**)list_to_array(plist);</highlight></codeline>
<codeline lineno="831"><highlight class="comment"></highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/>load_args<sp/>args<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/>args.w<sp/>=<sp/>net.w;</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/>args.h<sp/>=<sp/>net.h;</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/>args.paths<sp/>=<sp/>paths;</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/>args.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/>args.m<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/>args.d<sp/>=<sp/>&amp;buffer;</highlight></codeline>
<codeline lineno="839"><highlight class="comment"></highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/>args.min<sp/>=<sp/>net.min_crop;</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/>args.max<sp/>=<sp/>net.max_crop;</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/>args.angle<sp/>=<sp/>net.angle;</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/>args.aspect<sp/>=<sp/>net.aspect;</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/>args.exposure<sp/>=<sp/>net.exposure;</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/>args.saturation<sp/>=<sp/>net.saturation;</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/>args.hue<sp/>=<sp/>net.hue;</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/>args.size<sp/>=<sp/>net.w;</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/><sp/>args.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/>args.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*ls[1]<sp/>=<sp/>{&quot;coco&quot;};</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/>args.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="852"><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_t<sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="855"><highlight class="comment"></highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/>network_state<sp/>gstate<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.net<sp/>=<sp/>net;</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>x_size<sp/>=<sp/>get_network_input_size(net)*net.batch;</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>y_size<sp/>=<sp/>1*net.batch;</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.input<sp/>=<sp/>cuda_make_array(0,<sp/>x_size);</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.truth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/>gstate.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*X<sp/>=<sp/>calloc(x_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*y<sp/>=<sp/>calloc(y_size,<sp/>sizeof(float));</highlight></codeline>
<codeline lineno="867"><highlight class="comment"></highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/><sp/>network_state<sp/>astate<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.net<sp/>=<sp/>anet;</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>ay_size<sp/>=<sp/>get_network_output_size(anet)*anet.batch;</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.input<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.truth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/>astate.train<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="876"><highlight class="comment"></highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*imerror<sp/>=<sp/>cuda_make_array(0,<sp/>imlayer.outputs);</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*ones_gpu<sp/>=<sp/>cuda_make_array(0,<sp/>ay_size);</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/><sp/><sp/>fill_gpu(ay_size,<sp/>1,<sp/>ones_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="880"><highlight class="comment"></highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>aloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>gloss_avg<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="883"><highlight class="comment"></highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/><sp/><sp/><sp/>//data<sp/>generated<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="885"><highlight class="comment"></highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>(get_current_batch(net)<sp/>&lt;<sp/>net.max_batches)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(load_thread,<sp/>0);</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="892"><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Loaded:<sp/>%lf<sp/>seconds\n&quot;,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="894"><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>generated<sp/>=<sp/>copy_data(train);</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>gloss<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="898"><highlight class="comment"></highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>net.subdivisions;<sp/>++j){</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_next_batch(train,<sp/>net.batch,<sp/>j*net.batch,<sp/>X,<sp/>y);</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_push_array(gstate.input,<sp/>X,<sp/>x_size);</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*net.seen<sp/>+=<sp/>net.batch;</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(net,<sp/>gstate);</highlight></codeline>
<codeline lineno="904"><highlight class="comment"></highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_gpu(imlayer.outputs,<sp/>0,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.input<sp/>=<sp/>imlayer.output_gpu;</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.delta<sp/>=<sp/>imerror;</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>astate.truth<sp/>=<sp/>ones_gpu;</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_network_gpu(anet,<sp/>astate);</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(anet,<sp/>astate);</highlight></codeline>
<codeline lineno="911"><highlight class="comment"></highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scal_gpu(imlayer.outputs,<sp/>1,<sp/>imerror,<sp/>1);</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axpy_gpu(imlayer.outputs,<sp/>1,<sp/>imerror,<sp/>1,<sp/>imlayer.delta_gpu,<sp/>1);</highlight></codeline>
<codeline lineno="914"><highlight class="comment"></highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_network_gpu(net,<sp/>gstate);</highlight></codeline>
<codeline lineno="916"><highlight class="comment"></highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;features<sp/>%f\n&quot;,<sp/>cuda_mag_array(imlayer.delta_gpu,<sp/>imlayer.outputs));</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;realness<sp/>%f\n&quot;,<sp/>cuda_mag_array(imerror,<sp/>imlayer.outputs));</highlight></codeline>
<codeline lineno="919"><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gloss<sp/>+=<sp/>get_network_cost(net)<sp/>/(net.subdivisions*net.batch);</highlight></codeline>
<codeline lineno="921"><highlight class="comment"></highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_pull_array(imlayer.output_gpu,<sp/>imlayer.output,<sp/>imlayer.outputs*imlayer.batch);</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>net.batch;<sp/>++k){</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>j*net.batch<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_cpu(imlayer.outputs,<sp/>imlayer.output<sp/>+<sp/>k*imlayer.outputs,<sp/>1,<sp/>generated.X.vals[index],<sp/>1);</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated.y.vals[index][0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>harmless_update_network_gpu(anet);</highlight></codeline>
<codeline lineno="930"><highlight class="comment"></highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>merge<sp/>=<sp/>concat_data(train,<sp/>generated);</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>randomize_data(merge);</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>aloss<sp/>=<sp/>train_network(anet,<sp/>merge);</highlight></codeline>
<codeline lineno="934"><highlight class="comment"></highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(net);</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_network_gpu(anet);</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(merge);</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(train);</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(generated);</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aloss_avg<sp/>&lt;<sp/>0)<sp/>aloss_avg<sp/>=<sp/>aloss;</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aloss_avg<sp/>=<sp/>aloss_avg*.9<sp/>+<sp/>aloss*.1;</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gloss_avg<sp/>=<sp/>gloss_avg*.9<sp/>+<sp/>gloss*.1;</highlight></codeline>
<codeline lineno="943"><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%d:<sp/>gen:<sp/>%f,<sp/>adv:<sp/>%f<sp/>|<sp/>gen_avg:<sp/>%f,<sp/>adv_avg:<sp/>%f,<sp/>%f<sp/>rate,<sp/>%lf<sp/>seconds,<sp/>%d<sp/>images\n&quot;,<sp/>i,<sp/>gloss,<sp/>aloss,<sp/>gloss_avg,<sp/>aloss_avg,<sp/>get_current_rate(net),<sp/>sec(clock()-time),<sp/>i*imgs);</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%1000==0){</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>base,<sp/>i);</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>abase,<sp/>i);</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%100==0){</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>abase);</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(anet,<sp/>buff);</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_final.weights&quot;,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="963"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="964"><highlight class="comment">}</highlight></codeline>
<codeline lineno="965"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="968"><highlight class="comment">void<sp/>train_lsd(char<sp/>*cfgfile,<sp/>char<sp/>*weightfile,<sp/>int<sp/>clear)</highlight></codeline>
<codeline lineno="969"><highlight class="comment">{</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*train_images<sp/>=<sp/>&quot;/home/pjreddie/data/coco/trainvalno5k.txt&quot;;</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*backup_directory<sp/>=<sp/>&quot;/home/pjreddie/backup/&quot;;</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*base<sp/>=<sp/>basecfg(cfgfile);</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;%s\n&quot;,<sp/>base);</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>avg_loss<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/><sp/>network<sp/>net<sp/>=<sp/>parse_network_cfg(cfgfile);</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/>if(weightfile){</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_weights(&amp;net,<sp/>weightfile);</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/>if(clear)<sp/>*net.seen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/>printf(&quot;Learning<sp/>Rate:<sp/>%g,<sp/>Momentum:<sp/>%g,<sp/>Decay:<sp/>%g\n&quot;,<sp/>net.learning_rate,<sp/>net.momentum,<sp/>net.decay);</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>imgs<sp/>=<sp/>net.batch*net.subdivisions;</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>*net.seen/imgs;</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/>data<sp/>train,<sp/>buffer;</highlight></codeline>
<codeline lineno="985"><highlight class="comment"></highlight></codeline>
<codeline lineno="986"><highlight class="comment"></highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>*plist<sp/>=<sp/>get_paths(train_images);</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/><sp/>//int<sp/>N<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>**paths<sp/>=<sp/>(char<sp/>**)list_to_array(plist);</highlight></codeline>
<codeline lineno="990"><highlight class="comment"></highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/><sp/><sp/>load_args<sp/>args<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/><sp/><sp/>args.w<sp/>=<sp/>net.w;</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/><sp/>args.h<sp/>=<sp/>net.h;</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/><sp/>args.paths<sp/>=<sp/>paths;</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/><sp/><sp/>args.n<sp/>=<sp/>imgs;</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/><sp/>args.m<sp/>=<sp/>plist-&gt;size;</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/><sp/><sp/><sp/>args.d<sp/>=<sp/>&amp;buffer;</highlight></codeline>
<codeline lineno="998"><highlight class="comment"></highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/><sp/><sp/>args.min<sp/>=<sp/>net.min_crop;</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/><sp/><sp/>args.max<sp/>=<sp/>net.max_crop;</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/><sp/><sp/>args.angle<sp/>=<sp/>net.angle;</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/><sp/>args.aspect<sp/>=<sp/>net.aspect;</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/><sp/><sp/>args.exposure<sp/>=<sp/>net.exposure;</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/><sp/>args.saturation<sp/>=<sp/>net.saturation;</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/><sp/><sp/>args.hue<sp/>=<sp/>net.hue;</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/><sp/><sp/>args.size<sp/>=<sp/>net.w;</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/><sp/>args.type<sp/>=<sp/>CLASSIFICATION_DATA;</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/><sp/>args.classes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>*ls[1]<sp/>=<sp/>{&quot;coco&quot;};</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/><sp/><sp/>args.labels<sp/>=<sp/>ls;</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"></highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/><sp/>pthread_t<sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/><sp/><sp/><sp/>//while(i*imgs<sp/>&lt;<sp/>N*120){</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/>while(get_current_batch(net)<sp/>&lt;<sp/>net.max_batches){</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(load_thread,<sp/>0);</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>train<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_thread<sp/>=<sp/>load_data_in_thread(args);</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"></highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Loaded:<sp/>%lf<sp/>seconds\n&quot;,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"></highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>loss<sp/>=<sp/>train_network(net,<sp/>train);</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(avg_loss<sp/>&lt;<sp/>0)<sp/>avg_loss<sp/>=<sp/>loss;</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg_loss<sp/>=<sp/>avg_loss*.9<sp/>+<sp/>loss*.1;</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"></highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%d:<sp/>%f,<sp/>%f<sp/>avg,<sp/>%f<sp/>rate,<sp/>%lf<sp/>seconds,<sp/>%d<sp/>images\n&quot;,<sp/>i,<sp/>loss,<sp/>avg_loss,<sp/>get_current_rate(net),<sp/>sec(clock()-time),<sp/>i*imgs);</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%1000==0){</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_%d.weights&quot;,<sp/>backup_directory,<sp/>base,<sp/>i);</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i%100==0){</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s.backup&quot;,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data(train);</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/><sp/>char<sp/>buff[256];</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/>sprintf(buff,<sp/>&quot;%s/%s_final.weights&quot;,<sp/>backup_directory,<sp/>base);</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/>save_weights(net,<sp/>buff);</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_lsd(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cfgfile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*weightfile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gray)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetwork" kindref="compound">network</ref><sp/>net<sp/>=<sp/>parse_network_cfg(cfgfile);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(weightfile){</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_weights(&amp;net,<sp/>weightfile);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>set_batch_network(&amp;net,<sp/>1);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(2222222);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>time;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[256];</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input<sp/>=<sp/>buff;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>imlayer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>net.n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net.layers[i].out_c<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imlayer<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filename){</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(input,<sp/>filename,<sp/>256);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>Image<sp/>Path:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>fgets(input,<sp/>256,<sp/>stdin);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!input)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strtok(input,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>im<sp/>=<sp/>load_image_color(input,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>resized<sp/>=<sp/>resize_min(im,<sp/>net.w);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>crop<sp/>=<sp/>crop_image(resized,<sp/>(resized.w<sp/>-<sp/>net.w)/2,<sp/>(resized.h<sp/>-<sp/>net.h)/2,<sp/>net.w,<sp/>net.h);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gray)<sp/>grayscale_image_3c(crop);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*X<sp/>=<sp/>crop.data;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time=clock();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network_predict(net,<sp/>X);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structimage" kindref="compound">image</ref><sp/>out<sp/>=<sp/>get_network_image_layer(net,<sp/>imlayer);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yuv_to_rgb(out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constrain_image(out);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Predicted<sp/>in<sp/>%f<sp/>seconds.\n&quot;</highlight><highlight class="normal">,<sp/>input,<sp/>sec(clock()-time));</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(out,<sp/></highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>show_image(crop,<sp/></highlight><highlight class="stringliteral">&quot;crop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_image(out,<sp/></highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OPENCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWaitKey(0);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_image(im);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_image(resized);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_image(crop);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run_lsd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc<sp/>&lt;<sp/>4){</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;usage:<sp/>%s<sp/>%s<sp/>[train/test/valid]<sp/>[cfg]<sp/>[weights<sp/>(optional)]\n&quot;</highlight><highlight class="normal">,<sp/>argv[0],<sp/>argv[1]);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clear<sp/>=<sp/>find_arg(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;-clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>display<sp/>=<sp/>find_arg(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;-display&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file<sp/>=<sp/>find_char_arg(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;-file&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;/home/pjreddie/data/imagenet/imagenet1k.train.list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cfg<sp/>=<sp/>argv[3];</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*weights<sp/>=<sp/>(argc<sp/>&gt;<sp/>4)<sp/>?<sp/>argv[4]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename<sp/>=<sp/>(argc<sp/>&gt;<sp/>5)<sp/>?<sp/>argv[5]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*acfg<sp/>=<sp/>argv[5];</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aweights<sp/>=<sp/>(argc<sp/>&gt;<sp/>6)<sp/>?<sp/>argv[6]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(0==strcmp(argv[2],<sp/>&quot;train&quot;))<sp/>train_lsd(cfg,<sp/>weights,<sp/>clear);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>if(0==strcmp(argv[2],<sp/>&quot;train2&quot;))<sp/>train_lsd2(cfg,<sp/>weights,<sp/>acfg,<sp/>aweights,<sp/>clear);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>if(0==strcmp(argv[2],<sp/>&quot;traincolor&quot;))<sp/>train_colorizer(cfg,<sp/>weights,<sp/>acfg,<sp/>aweights,<sp/>clear);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>if(0==strcmp(argv[2],<sp/>&quot;train3&quot;))<sp/>train_lsd3(argv[3],<sp/>argv[4],<sp/>argv[5],<sp/>argv[6],<sp/>argv[7],<sp/>argv[8],<sp/>clear);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0==strcmp(argv[2],<sp/></highlight><highlight class="stringliteral">&quot;traingan&quot;</highlight><highlight class="normal">))<sp/>train_dcgan(cfg,<sp/>weights,<sp/>acfg,<sp/>aweights,<sp/>clear,<sp/>display,<sp/>file);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0==strcmp(argv[2],<sp/></highlight><highlight class="stringliteral">&quot;traincolor&quot;</highlight><highlight class="normal">))<sp/>train_colorizer(cfg,<sp/>weights,<sp/>acfg,<sp/>aweights,<sp/>clear,<sp/>display);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0==strcmp(argv[2],<sp/></highlight><highlight class="stringliteral">&quot;gan&quot;</highlight><highlight class="normal">))<sp/>test_dcgan(cfg,<sp/>weights);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0==strcmp(argv[2],<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">))<sp/>test_lsd(cfg,<sp/>weights,<sp/>filename,<sp/>0);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0==strcmp(argv[2],<sp/></highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">))<sp/>test_lsd(cfg,<sp/>weights,<sp/>filename,<sp/>1);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(0==strcmp(argv[2],<sp/>&quot;valid&quot;))<sp/>validate_lsd(cfg,<sp/>weights);</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/workspace/roboy_vision/src/pyyolo/darknet/examples/lsd.c"/>
  </compounddef>
</doxygen>
